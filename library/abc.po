# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org / https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/PyCampES/python-docs-es/blob/3.8/TRANSLATORS to get the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-06 11:59-0400\n"
"PO-Revision-Date: 2020-07-10 11:42-0500\n"
"Language-Team: python-doc-es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Last-Translator: \n"
"X-Generator: Poedit 2.3.1\n"
"Language: es\n"
"X-Poedit-SourceCharset: UTF-8\n"

#: ../Doc/library/abc.rst:2
msgid ":mod:`abc` --- Abstract Base Classes"
msgstr ":mod:`abc` --- Clases de Base Abstracta"

#: ../Doc/library/abc.rst:11
msgid "**Source code:** :source:`Lib/abc.py`"
msgstr "**Código fuente:** :source:`Lib/abc.py`"

#: ../Doc/library/abc.rst:15
msgid ""
"This module provides the infrastructure for defining :term:`abstract base "
"classes <abstract base class>` (ABCs) in Python, as outlined in :pep:`3119`; "
"see the PEP for why this was added to Python. (See also :pep:`3141` and the :"
"mod:`numbers` module regarding a type hierarchy for numbers based on ABCs.)"
msgstr ""
"Este módulo proporciona la infraestructura para definir :term:`clases de "
"base abstracta <abstract base class>` (CBAs) en Python, como se describe en :"
"pep:`3119`; consulte en el PEP el porqué fue agregado a Python. (Véase "
"también :pep:`3141` y el módulo :mod:`numbers` con respecto a una jerarquía "
"de tipos para números basados en CBAs.)"

#: ../Doc/library/abc.rst:20
#, fuzzy
msgid ""
"The :mod:`collections` module has some concrete classes that derive from "
"ABCs; these can, of course, be further derived. In addition, the :mod:"
"`collections.abc` submodule has some ABCs that can be used to test whether a "
"class or instance provides a particular interface, for example, if it is "
"hashable or if it is a mapping."
msgstr ""
"El módulo :mod:'collections' tiene algunas clases concretas que derivan de "
"ABCs; estos pueden, por supuesto, ser derivados aún más. Además, el "
"submódulo :mod:'collections.abc' tiene algunos ABC que se pueden utilizar "
"para probar si una clase o instancia proporciona una interfaz determinada, "
"por ejemplo, si es hashable o si es una asignación."

#: ../Doc/library/abc.rst:27
msgid ""
"This module provides the metaclass :class:`ABCMeta` for defining ABCs and a "
"helper class :class:`ABC` to alternatively define ABCs through inheritance:"
msgstr ""
"Este módulo provee la metaclase :class:`ABCMeta` para definir CBAs y una "
"clase auxiliar :class:`ABC` para definir CBAs alternativamente a través de "
"herencia:"

#: ../Doc/library/abc.rst:32
msgid ""
"A helper class that has :class:`ABCMeta` as its metaclass.  With this class, "
"an abstract base class can be created by simply deriving from :class:`ABC` "
"avoiding sometimes confusing metaclass usage, for example::"
msgstr ""
"Una clase auxiliar que tiene una :class:`ABCMeta` como su metaclase.  Con "
"esta clase, una clase de base abstracta puede ser creada simplemente "
"derivándola desde :class:`ABC` evitando el uso de metaclases algunas veces "
"confusos, por ejemplo::"

#: ../Doc/library/abc.rst:41
#, fuzzy
msgid ""
"Note that the type of :class:`ABC` is still :class:`ABCMeta`, therefore "
"inheriting from :class:`ABC` requires the usual precautions regarding "
"metaclass usage, as multiple inheritance may lead to metaclass conflicts. "
"One may also define an abstract base class by passing the metaclass keyword "
"and using :class:`ABCMeta` directly, for example::"
msgstr ""
"Tenga en cuenta que el tipo de :class:'ABC' sigue siendo :class:'ABCMeta', "
"por lo tanto, heredar de :class:'ABC' requiere las precauciones habituales "
"con respecto al uso de la metaclase, ya que la herencia múltiple puede dar "
"lugar a conflictos de metaclase. También se puede definir una clase base "
"abstracta pasando la palabra clave metaclass y utilizando :class:'ABCMeta' "
"directamente, por ejemplo::"

#: ../Doc/library/abc.rst:57
msgid "Metaclass for defining Abstract Base Classes (ABCs)."
msgstr "Metaclases para definir Clases de Base Abstracta (CBAs)."

#: ../Doc/library/abc.rst:59
msgid ""
"Use this metaclass to create an ABC.  An ABC can be subclassed directly, and "
"then acts as a mix-in class.  You can also register unrelated concrete "
"classes (even built-in classes) and unrelated ABCs as \"virtual subclasses\" "
"-- these and their descendants will be considered subclasses of the "
"registering ABC by the built-in :func:`issubclass` function, but the "
"registering ABC won't show up in their MRO (Method Resolution Order) nor "
"will method implementations defined by the registering ABC be callable (not "
"even via :func:`super`). [#]_"
msgstr ""
"Utilice esta metaclase para crear un CBA.  Un CBA puede ser heredado "
"directamente y así, actuar como una clase mixta.  También se puede registrar "
"clases concretas no relacionadas (incluso clases integradas) y CBAs no "
"relacionadas como \"subclases virtuales\" -- estas y sus descendientes serán "
"consideradas subclases del CBA registrado por la función integrada :func:"
"`issubclass`, pero el CBA registrado no aparecerá en su *MRO* (Orden de "
"Resolución de Métodos) ni las implementaciones de método definidas por el "
"CBA registrado serán invocables (ni siquiera a través de :func:`super`). [#]_"

#: ../Doc/library/abc.rst:68
msgid ""
"Classes created with a metaclass of :class:`ABCMeta` have the following "
"method:"
msgstr ""
"Las clases creadas con una metaclase de :class:`ABCMeta` tienen el siguiente "
"método:"

#: ../Doc/library/abc.rst:72
msgid ""
"Register *subclass* as a \"virtual subclass\" of this ABC. For example::"
msgstr ""
"Registre la *subclase* como una \"subclase virtual\" de esta CBA. Por "
"ejemplo::"

#: ../Doc/library/abc.rst:85
msgid "Returns the registered subclass, to allow usage as a class decorator."
msgstr ""
"Retorna la subclase registrada, para permitir su uso como decorador de clase."

#: ../Doc/library/abc.rst:88
msgid ""
"To detect calls to :meth:`register`, you can use the :func:`get_cache_token` "
"function."
msgstr ""
"Para detectar llamadas a :meth:`register`, se puede usar la función :func:"
"`get_cache_token`."

#: ../Doc/library/abc.rst:92
msgid "You can also override this method in an abstract base class:"
msgstr "También se puede redefinir este método en una clase de base abstracta:"

#: ../Doc/library/abc.rst:96
msgid "(Must be defined as a class method.)"
msgstr "(Debe ser definido como un método de clase.)"

#: ../Doc/library/abc.rst:98
msgid ""
"Check whether *subclass* is considered a subclass of this ABC.  This means "
"that you can customize the behavior of ``issubclass`` further without the "
"need to call :meth:`register` on every class you want to consider a subclass "
"of the ABC.  (This class method is called from the :meth:`__subclasscheck__` "
"method of the ABC.)"
msgstr ""
"Compruebe si la *subclase* se considera una subclase de este CBA.  Esto "
"significa que puede personalizar aún más el comportamiento de ``issubclass`` "
"sin necesidad de llamar a :meth:`register` en cada clase que desee "
"considerar una subclase del CBA.  (Este método de clase es llamado desde el "
"método :meth:`__subclasscheck__` del CBA.)"

#: ../Doc/library/abc.rst:104
msgid ""
"This method should return ``True``, ``False`` or ``NotImplemented``.  If it "
"returns ``True``, the *subclass* is considered a subclass of this ABC. If it "
"returns ``False``, the *subclass* is not considered a subclass of this ABC, "
"even if it would normally be one.  If it returns ``NotImplemented``, the "
"subclass check is continued with the usual mechanism."
msgstr ""
"Este método debe retornar ``True``, ``False`` o ``NotImplemented``.  Si "
"retorna ``True``, la *subclase* se considera una subclase de este CBA. Si "
"retorna ``False``, la *subclase* no se considera una subclase de este CBA, "
"incluso si normalmente sería una.  Si retorna ``NotImplemented``, la "
"comprobación de subclase se continúa con el mecanismo usual."

#: ../Doc/library/abc.rst:114
msgid ""
"For a demonstration of these concepts, look at this example ABC definition::"
msgstr ""
"Para una demostración de estos conceptos, vea este ejemplo de la definición "
"CBA::"

#: ../Doc/library/abc.rst:143
#, fuzzy
msgid ""
"The ABC ``MyIterable`` defines the standard iterable method, :meth:"
"`~iterator.__iter__`, as an abstract method.  The implementation given here "
"can still be called from subclasses.  The :meth:`get_iterator` method is "
"also part of the ``MyIterable`` abstract base class, but it does not have to "
"be overridden in non-abstract derived classes."
msgstr ""
"El ABC ''MyIterable'' define el método iterable estándar, :meth:'-iterator."
"__iter__', como un método abstracto.  La implementación dada aquí todavía se "
"puede llamar desde subclases.  El método :meth:'get_iterator' también forma "
"parte de la clase base abstracta ''MyIterable'', pero no tiene que "
"reemplazarse en clases derivadas no abstractas."

#: ../Doc/library/abc.rst:149
#, fuzzy
msgid ""
"The :meth:`__subclasshook__` class method defined here says that any class "
"that has an :meth:`~iterator.__iter__` method in its :attr:`~object."
"__dict__` (or in that of one of its base classes, accessed via the :attr:"
"`~class.__mro__` list) is considered a ``MyIterable`` too."
msgstr ""
"El método de la clase :meth:'__subclasshook__' definido aquí dice que "
"cualquier clase que tenga un método :meth:'''iterator.__iter__' en su :"
"attr:''object.__dict__' (o en la de una de sus clases base, a la que se "
"accede a través de la lista :attr:''class.__mro__') también se considera un "
"''MyIterable'''"

#: ../Doc/library/abc.rst:154
#, fuzzy
msgid ""
"Finally, the last line makes ``Foo`` a virtual subclass of ``MyIterable``, "
"even though it does not define an :meth:`~iterator.__iter__` method (it uses "
"the old-style iterable protocol, defined in terms of :meth:`__len__` and :"
"meth:`__getitem__`).  Note that this will not make ``get_iterator`` "
"available as a method of ``Foo``, so it is provided separately."
msgstr ""
"Por último, la última línea convierte ''Foo'' en una subclase virtual de "
"''MyIterable'', aunque no define un método :meth:'-iterator."
"__iter__' (utiliza el protocolo iterable de estilo antiguo, definido en "
"términos de :meth:'__len__' y :meth:'__getitem__').  Tenga en cuenta que "
"esto no hará que ''get_iterator'' esté disponible como un método de ''Foo'', "
"por lo que se proporciona por separado."

#: ../Doc/library/abc.rst:163
msgid "The :mod:`abc` module also provides the following decorator:"
msgstr "El módulo :mod:`abc` también proporciona el siguiente decorador:"

#: ../Doc/library/abc.rst:167
msgid "A decorator indicating abstract methods."
msgstr ""

#: ../Doc/library/abc.rst:169
#, fuzzy
msgid ""
"Using this decorator requires that the class's metaclass is :class:`ABCMeta` "
"or is derived from it.  A class that has a metaclass derived from :class:"
"`ABCMeta` cannot be instantiated unless all of its abstract methods and "
"properties are overridden.  The abstract methods can be called using any of "
"the normal 'super' call mechanisms.  :func:`abstractmethod` may be used to "
"declare abstract methods for properties and descriptors."
msgstr ""
"El uso de este decorador requiere que la metaclase de la clase sea :"
"class:'ABCMeta' o se derive de ella.  No se puede crear una instancia de una "
"clase que tiene una metaclase derivada de :class:'ABCMeta' a menos que se "
"invaliden todos sus métodos y propiedades abstractas.  Los métodos "
"abstractos se pueden llamar usando cualquiera de los mecanismos de llamada "
"'super' normales.  :func:'abstractmethod' se puede utilizar para declarar "
"métodos abstractos para propiedades y descriptores."

#: ../Doc/library/abc.rst:176
#, fuzzy
msgid ""
"Dynamically adding abstract methods to a class, or attempting to modify the "
"abstraction status of a method or class once it is created, are not "
"supported.  The :func:`abstractmethod` only affects subclasses derived using "
"regular inheritance; \"virtual subclasses\" registered with the ABC's :meth:"
"`register` method are not affected."
msgstr ""
"No se admiten la adición dinámica de métodos abstractos a una clase o el "
"intento de modificar el estado de abstracción de un método o clase una vez "
"creado.  El :func:'abstractmethod' sólo afecta a las subclases derivadas "
"mediante herencia regular; Las \"subclases virtuales\" registradas con el "
"método :meth:'register' de ABC no se ven afectadas."

#: ../Doc/library/abc.rst:182
#, fuzzy
msgid ""
"When :func:`abstractmethod` is applied in combination with other method "
"descriptors, it should be applied as the innermost decorator, as shown in "
"the following usage examples::"
msgstr ""
"Cuando :func:'abstractmethod' se aplica en combinación con otros "
"descriptores de método, se debe aplicar como el decorador más interno, como "
"se muestra en los siguientes ejemplos de uso::"

#: ../Doc/library/abc.rst:216
#, fuzzy
msgid ""
"In order to correctly interoperate with the abstract base class machinery, "
"the descriptor must identify itself as abstract using :attr:"
"`__isabstractmethod__`. In general, this attribute should be ``True`` if any "
"of the methods used to compose the descriptor are abstract. For example, "
"Python's built-in :class:`property` does the equivalent of::"
msgstr ""
"Para interoperar correctamente con la máquina de clase base abstracta, el "
"descriptor debe identificarse como abstracto utilizando :"
"attr:'__isabstractmethod__'. En general, este atributo debe ser ''True'' si "
"alguno de los métodos utilizados para componer el descriptor es abstracto. "
"Por ejemplo, la propiedad integrada de Python :class:'property' hace el "
"equivalente de::"

#: ../Doc/library/abc.rst:231
#, fuzzy
msgid ""
"Unlike Java abstract methods, these abstract methods may have an "
"implementation. This implementation can be called via the :func:`super` "
"mechanism from the class that overrides it.  This could be useful as an end-"
"point for a super-call in a framework that uses cooperative multiple-"
"inheritance."
msgstr ""
"A diferencia de los métodos abstractos de Java, estos métodos abstractos "
"pueden tener una implementación. Esta implementación se puede llamar a "
"través del mecanismo :func:'super' de la clase que lo invalida.  Esto podría "
"ser útil como punto final para una superen llamada en un marco que usa "
"herencia múltiple cooperativa."

#: ../Doc/library/abc.rst:239
msgid "The :mod:`abc` module also supports the following legacy decorators:"
msgstr ""

#: ../Doc/library/abc.rst:244
msgid ""
"It is now possible to use :class:`classmethod` with :func:`abstractmethod`, "
"making this decorator redundant."
msgstr ""

#: ../Doc/library/abc.rst:248
msgid ""
"A subclass of the built-in :func:`classmethod`, indicating an abstract "
"classmethod. Otherwise it is similar to :func:`abstractmethod`."
msgstr ""

#: ../Doc/library/abc.rst:251
msgid ""
"This special case is deprecated, as the :func:`classmethod` decorator is now "
"correctly identified as abstract when applied to an abstract method::"
msgstr ""

#: ../Doc/library/abc.rst:265
#, fuzzy
msgid ""
"It is now possible to use :class:`staticmethod` with :func:`abstractmethod`, "
"making this decorator redundant."
msgstr ""
"Ahora es posible utilizar :class:'staticmethod' con :func:'abstractmethod', "
"haciendo que este decorador sea redundante."

#: ../Doc/library/abc.rst:269
msgid ""
"A subclass of the built-in :func:`staticmethod`, indicating an abstract "
"staticmethod. Otherwise it is similar to :func:`abstractmethod`."
msgstr ""

#: ../Doc/library/abc.rst:272
msgid ""
"This special case is deprecated, as the :func:`staticmethod` decorator is "
"now correctly identified as abstract when applied to an abstract method::"
msgstr ""

#: ../Doc/library/abc.rst:285
msgid ""
"It is now possible to use :class:`property`, :meth:`property.getter`, :meth:"
"`property.setter` and :meth:`property.deleter` with :func:`abstractmethod`, "
"making this decorator redundant."
msgstr ""

#: ../Doc/library/abc.rst:290
msgid ""
"A subclass of the built-in :func:`property`, indicating an abstract property."
msgstr ""
"Una subclase de la :func:`property` integrada, que indica una propiedad "
"abstracta."

#: ../Doc/library/abc.rst:293
msgid ""
"This special case is deprecated, as the :func:`property` decorator is now "
"correctly identified as abstract when applied to an abstract method::"
msgstr ""
"Este caso especial está obsoleto, ya que el decorador :func:`property` ahora "
"es identificado correctamente como abstracto cuando es aplicado a un método "
"abstracto::"

#: ../Doc/library/abc.rst:303
#, fuzzy
msgid ""
"The above example defines a read-only property; you can also define a read-"
"write abstract property by appropriately marking one or more of the "
"underlying methods as abstract::"
msgstr ""
"En el ejemplo anterior se define una propiedad de solo lectura; También "
"puede definir una propiedad abstracta de lectura y escritura marcando "
"adecuadamente uno o varios de los métodos subyacentes como abstractos::"

#: ../Doc/library/abc.rst:317
msgid ""
"If only some components are abstract, only those components need to be "
"updated to create a concrete property in a subclass::"
msgstr ""
"Si solo algunos componentes son abstractos, solo estos componentes necesitan "
"ser actualizados para crear una propiedad concreta en una subclase::"

#: ../Doc/library/abc.rst:326
msgid "The :mod:`abc` module also provides the following functions:"
msgstr "El módulo :mod:`abc` también proporciona las siguientes funciones:"

#: ../Doc/library/abc.rst:330
msgid "Returns the current abstract base class cache token."
msgstr "Retorna el token de caché de la clase base abstracta actual."

#: ../Doc/library/abc.rst:332
msgid ""
"The token is an opaque object (that supports equality testing) identifying "
"the current version of the abstract base class cache for virtual subclasses. "
"The token changes with every call to :meth:`ABCMeta.register` on any ABC."
msgstr ""

#: ../Doc/library/abc.rst:340
msgid "Footnotes"
msgstr "Notas"

#: ../Doc/library/abc.rst:341
msgid ""
"C++ programmers should note that Python's virtual base class concept is not "
"the same as C++'s."
msgstr ""
"Los desarrolladores de C++ pueden notar que el concepto de clase base "
"virtual de Python no es el mismo que en C++."
